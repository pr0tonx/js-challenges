/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed n, find the sum of the even-valued terms.

fiboEvenSum(10) should return a number.
Your function should return an even value.
Your function should sum the even-valued Fibonacci numbers:
fiboEvenSum(8) should return 10.
fiboEvenSum(10) should return 10.
fiboEvenSum(34) should return 44.
fiboEvenSum(60) should return 44.
fiboEvenSum(1000) should return 798.
fiboEvenSum(100000) should return 60696.
fiboEvenSum(4000000) should return 4613732.
 */

const logResult = require('./log-result');

function fiboEvenSum(n) {
  let n1 = 1;
  let n2 = 2;
  let sum = 0;
  let sumEvenNumber = 0;

  for(let i = 2; n2 < n; i++) {
    sum = n1 + n2;
    // console.log('sum', sum);

    n2 = n1;
    n1 = sum;

    if(sum % 2 === 0) {
      console.log('sum', i, sum);
      sumEvenNumber += i ;
    }
  }

  return sumEvenNumber;
}


const fiboEvenSum2 = (number) => {
  if (number <= 1) {
    return 0;
  } else {
    let evenSum = 0,
      prevFibNum = 1,
      // According to problem description our Fibonacci series starts with 1, 2
      fibNum = 2;
    for (let i = 2; fibNum <= number; i++) {
      if (fibNum % 2 === 0) {
        evenSum += fibNum;
      }
      [prevFibNum, fibNum] = [fibNum, prevFibNum + fibNum];
    }
    return evenSum;
  }
};
console.log(fiboEvenSum2(8));
